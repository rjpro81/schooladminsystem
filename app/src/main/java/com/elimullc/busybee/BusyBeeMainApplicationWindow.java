
package com.elimullc.busybee;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JTextArea;
/**
 * The purpose of this class is to serve as the main window of the application. 
 * The majority of application functionality will be served in this user interface.
 * @author Ralph Julsaint
 */
public class BusyBeeMainApplicationWindow extends javax.swing.JFrame {
    //instance variables
    private final String URL = "jdbc:derby:schoolDB;create=false";
    private final String username = "julsaint";
    private final String password = "julsaint";
    //Table models
    private BusyBeeTableModel tableModel;
  
 
    
    /**
     * Creates new form BusyBeeMainApplicationWindow
     */
    public BusyBeeMainApplicationWindow() {
        super("BusyBee School Manager");
        initComponents();
        setFrame();
        calendarTextArea.append(getEvents().toString());//displays calendar events
        toDoListTextArea.setText(getToDos().toString());//displays todo's       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel applicationNameLabel = new javax.swing.JLabel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        searchTextField = new javax.swing.JTextField();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JButton printButton = new javax.swing.JButton();
        javax.swing.JScrollPane jScrollPane4 = new javax.swing.JScrollPane();
        displayTable = new javax.swing.JTable();
        taskPane = new javax.swing.JTabbedPane();
        javax.swing.JPanel calendarPanel = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        calendarTextArea = new javax.swing.JTextArea();
        javax.swing.JPanel toDoListPanel = new javax.swing.JPanel();
        javax.swing.JScrollPane jScrollPane3 = new javax.swing.JScrollPane();
        toDoListTextArea = new javax.swing.JTextArea();
        // Variables declaration - do not modify//GEN-BEGIN:variables
        javax.swing.JButton addButton = new javax.swing.JButton();
        javax.swing.JButton deleteButton = new javax.swing.JButton();
        javax.swing.JMenuBar jMenuBar1 = new javax.swing.JMenuBar();
        javax.swing.JMenu jMenu1 = new javax.swing.JMenu();
        javax.swing.JMenu jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1250, 700));
        setResizable(false);

        applicationNameLabel.setFont(new java.awt.Font("Ubuntu", Font.BOLD, 18)); // NOI18N
        applicationNameLabel.setText("BusyBee School Manager");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Administration");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("faculty");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("faculty listing");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("add faculty");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("update/delete faculty");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("class reports");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("students");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("student listing");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("add student");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("update/delete student");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("assign student");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("grades");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("add grades");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("school");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("school listing");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("add school");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("classrooms");
        javax.swing.tree.DefaultMutableTreeNode treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("K");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("1st");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("2nd");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("3rd");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("4th");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("5th");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("demographics");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("school report");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setToolTipText("");
        jTree1.addTreeSelectionListener(this::jTree1ValueChanged);
        jScrollPane1.setViewportView(jTree1);

        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
        });

        jLabel1.setText("Search:");

        printButton.setText("Print");
        printButton.addActionListener(evt -> printButtonActionPerformed());

        displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
            }
        ));
        jScrollPane4.setViewportView(displayTable);

        calendarTextArea.setEditable(false);
        calendarTextArea.setColumns(20);
        calendarTextArea.setRows(5);
        jScrollPane2.setViewportView(calendarTextArea);

        javax.swing.GroupLayout calendarPanelLayout = new javax.swing.GroupLayout(calendarPanel);
        calendarPanel.setLayout(calendarPanelLayout);
        calendarPanelLayout.setHorizontalGroup(
            calendarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
        );
        calendarPanelLayout.setVerticalGroup(
            calendarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
        );

        taskPane.addTab("Calendar", calendarPanel);

        toDoListTextArea.setEditable(false);
        toDoListTextArea.setColumns(20);
        toDoListTextArea.setRows(5);
        jScrollPane3.setViewportView(toDoListTextArea);

        javax.swing.GroupLayout toDoListPanelLayout = new javax.swing.GroupLayout(toDoListPanel);
        toDoListPanel.setLayout(toDoListPanelLayout);
        toDoListPanelLayout.setHorizontalGroup(
            toDoListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
        );
        toDoListPanelLayout.setVerticalGroup(
            toDoListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
        );

        taskPane.addTab("ToDoList", toDoListPanel);

        addButton.setText("Add");
        addButton.addActionListener(this::addButtonActionPerformed);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(this::deleteButtonActionPerformed);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(applicationNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(deleteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addButton))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(taskPane, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(519, 519, 519)
                                .addComponent(printButton)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applicationNameLabel)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(taskPane))
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printButton)
                    .addComponent(addButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
      
    /**
     * This method allows the user to add events to the calendar or to do list
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if (taskPane.getSelectedIndex() == 0){
            new AddNewCalendarEventWindow();//opens add to calendar window if calendar is focused
        } else{
            new AddNewTaskWindow();//opens add to task window if to do list is focused
        }
    }//GEN-LAST:event_addButtonActionPerformed
    /**
     * This method allows user to print table data
     */
    private void printButtonActionPerformed() {//GEN-FIRST:event_printButtonActionPerformed
        // TODO add your handling code here:
        try{
        displayTable.print();
        }
        catch(PrinterException e){
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_printButtonActionPerformed
    /**
     * This method allows user to select nodes from JTree and obtain the appropriate data
     * either via a table or window
     */
    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        // TODO add your handling code here:
        try{   
        String nodeAsString = jTree1.getLastSelectedPathComponent().toString();
        if (evt.getSource() == jTree1)
            switch(nodeAsString){
                case "faculty listing":
                    try {
                        //these queries are used for the JTree to obtain class information
                        String allFacultyQuery = "SELECT * FROM faculty ORDER BY empLastName ASC";
                        tableModel = new BusyBeeTableModel(URL, username, password, allFacultyQuery);
                    } catch (SQLException e) {
                        System.err.println(e.getMessage());
                    }
                    displayTable.setModel(tableModel);
                    break;
                case "add faculty":
                    new AddFacultyWindow();
                    break;
                case "update/delete faculty":
                    new UpdateFacultyWindow();
                    break;
                case "class reports":
                    new ClassReportWindow();
                    break;
                case "student listing":
                    try {
                        String allStudentsQuery = "SELECT * FROM students ORDER BY studentLastName ASC";
                        tableModel = new BusyBeeTableModel(URL, username, password, allStudentsQuery);
                    } catch (SQLException e) {
                        System.err.println(e.getMessage());
                    }
                    displayTable.setModel(tableModel);
                    break;
                case "add student":
                    new AddStudentWindow();
                    break;
                case "update/delete student":
                    new UpdateStudentWindow();
                    break;
                case "assign student":
                    new AssignStudentWindow();
                    break;
                case "grades":
                    try{
                        String studentGradesQuery = "SELECT students.studentID, students.studentFirstName, students.studentLastName, readingAverage, mathAverage, scienceAverage, socialStudiesAverage, faculty.empFirstName, faculty.empLastName FROM students INNER JOIN grades ON students.studentID = grades.studentID INNER JOIN classroom ON classroom.studentID = students.studentID INNER JOIN faculty ON faculty.employeeID = classroom.employeeID ORDER BY faculty.empLastName ASC";
                        tableModel = new BusyBeeTableModel(URL, username, password, studentGradesQuery);
                    }
                    catch(SQLException e){
                        System.err.println(e.getMessage());
                    }
                    displayTable.setModel(tableModel);
                    break;
                case "add grades":
                    new AddGradesWindow();
                    break;
                case "demographics":
                    new DemographicsWindow();
                    break;
                case "school listing":
                    try{
                        String allSchoolQuery = "SELECT * FROM school ORDER BY schoolName ASC";
                        tableModel = new BusyBeeTableModel(URL, username, password, allSchoolQuery);
                    }
                    catch(SQLException e){
                        System.err.println(e.getMessage());
                    }
                    displayTable.setModel(tableModel);
                    break;
                case "add school":
                    new AddSchoolWindow();
                    break;
                case "K":
                    try{
                        String allKinderClassesQuery = "SELECT students.studentID, students.studentFirstName, students.studentLastName, faculty.employeeID, faculty.empFirstName, faculty.empLastName, faculty.empGrade FROM students INNER JOIN classroom ON students.studentID = classroom.studentID INNER JOIN faculty ON classroom.employeeID = faculty.employeeID WHERE faculty.empGrade='K' ORDER BY faculty.empLastName ASC";
                        tableModel = new BusyBeeTableModel(URL, username, password, allKinderClassesQuery);
                    }
                    catch(SQLException e){
                        System.err.println(e.getMessage());
                    }
                    displayTable.setModel(tableModel);
                    break;
                case "1st":
                    try{
                        String allFirstClassesQuery = "SELECT students.studentID, students.studentFirstName, students.studentLastName, faculty.employeeID, faculty.empFirstName, faculty.empLastName, faculty.empGrade FROM students INNER JOIN classroom ON students.studentID = classroom.studentID INNER JOIN faculty ON classroom.employeeID = faculty.employeeID WHERE faculty.empGrade='1' ORDER BY faculty.empLastName ASC";
                        tableModel = new BusyBeeTableModel(URL, username, password, allFirstClassesQuery);
                    }
                    catch(SQLException e){
                        System.err.println(e.getMessage());
                    }
                    displayTable.setModel(tableModel);
                    break;
                case "2nd":
                    try{
                        String allSecondClassesQuery = "SELECT students.studentID, students.studentFirstName, students.studentLastName, faculty.employeeID, faculty.empFirstName, faculty.empLastName, faculty.empGrade FROM students INNER JOIN classroom ON students.studentID = classroom.studentID INNER JOIN faculty ON classroom.employeeID = faculty.employeeID WHERE faculty.empGrade='2' ORDER BY faculty.empLastName ASC";
                        tableModel = new BusyBeeTableModel(URL, username, password, allSecondClassesQuery);
                    }
                    catch(SQLException e){
                        System.err.println(e.getMessage());
                    }
                    displayTable.setModel(tableModel);
                    break;
                case "3rd":
                    try{
                        String allThirdClassesQuery = "SELECT students.studentID, students.studentFirstName, students.studentLastName, faculty.employeeID, faculty.empFirstName, faculty.empLastName, faculty.empGrade FROM students INNER JOIN classroom ON students.studentID = classroom.studentID INNER JOIN faculty ON classroom.employeeID = faculty.employeeID WHERE faculty.empGrade='3' ORDER BY faculty.empLastName ASC";
                        tableModel = new BusyBeeTableModel(URL, username, password, allThirdClassesQuery);
                    }
                    catch(SQLException e){
                        System.err.println(e.getMessage());
                    }
                    displayTable.setModel(tableModel);
                    break;
                case "4th":
                    try{
                        String allFourthClassesQuery = "SELECT students.studentID, students.studentFirstName, students.studentLastName, faculty.employeeID, faculty.empFirstName, faculty.empLastName, faculty.empGrade FROM students INNER JOIN classroom ON students.studentID = classroom.studentID INNER JOIN faculty ON classroom.employeeID = faculty.employeeID WHERE faculty.empGrade='4' ORDER BY faculty.empLastName ASC";
                        tableModel = new BusyBeeTableModel(URL, username, password, allFourthClassesQuery);
                    }
                    catch(SQLException e){
                        System.err.println(e.getMessage());
                    }
                    displayTable.setModel(tableModel);
                    break;
                case "5th":
                    try{
                        String allFifthClassesQuery = "SELECT students.studentID, students.studentFirstName, students.studentLastName, faculty.employeeID, faculty.empFirstName, faculty.empLastName, faculty.empGrade FROM students INNER JOIN classroom ON students.studentID = classroom.studentID INNER JOIN faculty ON classroom.employeeID = faculty.employeeID WHERE faculty.empGrade='5' ORDER BY faculty.empLastName ASC";
                        tableModel = new BusyBeeTableModel(URL, username, password, allFifthClassesQuery);
                    }
                    catch(SQLException e){
                        System.err.println(e.getMessage());
                    }
                    displayTable.setModel(tableModel);
                    break;
                case "school report":
                    new SchoolReportWindow();
                    break;
            }
        }
        catch(NullPointerException e){
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jTree1ValueChanged
    /**
     * This method allows the user to delete items from the calendar or to do list
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (taskPane.getSelectedIndex() == 0){
            new DeleteCalendarEventWindow();
        } else {
            new DeleteTaskWindow();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed
    /**
     * This method allows the user to search for student, faculty, or school records through the search text field
     */
    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        // TODO add your handling code here:
        String[] fullName;
        //once user presses enter the algorithm takes the string and retrives the appropriate database record
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            fullName = searchTextField.getText().split(" ");//splits the text field String to search for first and last name in database
            //enhanced for loop goes through all student records to verify if search is for a student record
            for (Student student : fromStudent(fullName[0], fullName[1])){
                if (student.getFirstName().equals(fullName[0]) && student.getLastName().equals(fullName[1])){
                    String[] columns = {"STUDENTID", "FIRSTNAME", "LASTNAME", "AGE", "BIRTHDATE", "ADDRESS", "CITY", "STATE", "ZIP", "PHONENUMBER", "GRADE", "ETHNICITY", "GENDER"};
                    Object[] data = {student.getStudentID(), student.getFirstName(), student.getLastName(), student.getAge(), student.getBirthDate(), student.getStreetAddress(), student.getCity(), student.getState(), student.getZip(), student.getPhoneNumber(), student.getGrade(), student.getEthnicity(), student.getGender()};
                    SearchTableModel searchTable = new SearchTableModel(columns, data);
                    displayTable.setModel(searchTable);//sets the appropriate table model for query
                }
            }
            //enhanced for loop goes through the faculty records to verify if the search is for a faculty member record
            for (FacultyMember facultyMember : fromFaculty(fullName[0], fullName[1])){
                if (facultyMember.getFirstName().equals(fullName[0]) && facultyMember.getLastName().equals(fullName[1])){
                    String[] columns = {"EMPLOYEEID", "FIRSTNAME", "LASTNAME", "AGE", "BIRTHDATE", "ADDRESS", "CITY", "STATE", "ZIP", "PHONENUMBER", "CREDENTIALS", "GRADE"};
                    Object[] data = {facultyMember.getEmployeeID(), facultyMember.getFirstName(), facultyMember.getLastName(), facultyMember.getAge(), facultyMember.getBirthDate(), facultyMember.getStreetAddress(), facultyMember.getCity(), facultyMember.getState(), facultyMember.getZip(), facultyMember.getPhoneNumber(), facultyMember.getCredentials(), facultyMember.getGradeLevel()};
                    SearchTableModel searchTableModel = new SearchTableModel(columns, data);
                    displayTable.setModel(searchTableModel);//sets the appropriate table model for query
                }
            }
            //enhanced for loop goes throught the school records to verify if the search is for a school record
            for (School school : fromSchool(searchTextField.getText())){
                if (school.getSchoolName().equals(searchTextField.getText())){
                    String[] columns = {"SCHOOLID", "SCHOOLNAME", "PRINCIPAL", "LEVEL", "TYPE", "DISTRICT", "ADDRESS", "CITY", "STATE", "ZIP", "PHONENUMBER", "EMAIL"};
                    Object[] data = {school.getSchoolID(), school.getSchoolName(), school.getSchoolPrincipal(), school.getSchoolGradeLevel(), school.getSchoolType(), school.getSchoolDistrict(), school.getSchoolAddress(), school.getSchoolCity(), school.getSchoolState(), school.getSchoolZip(), school.getPhoneNumber(), school.getEmail()};
                    SearchTableModel searchTableModel = new SearchTableModel(columns, data);
                    displayTable.setModel(searchTableModel);
                }
            }
        }
    }//GEN-LAST:event_searchTextFieldKeyPressed
    /**
     * This method returns a StringBuilder objects to add and format todo list for display
     */
    private StringBuilder getToDos(){
        List<ToDo> list = new ArrayList<>();
        StringBuilder str = new StringBuilder();
        try(Connection connection = DriverManager.getConnection(URL, username, password)){
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM tasks");
            Date date = new Date();
            while (resultSet.next()){
                list.add(new ToDo(resultSet.getString("taskName"),
                date.dateFromString(resultSet.getString("taskDate")), 
                resultSet.getString("taskTime")));
            }
        }
        catch(SQLException e){
            System.err.println(e.getMessage());
        }
        list.forEach(str::append);
        
        return str;
    }
    /**
     * This method returns a StringBuilder object that adds and formats calendar events for display
     * @return str
     */
    private StringBuilder getEvents(){
        List<Calendar> list = new ArrayList<>();
        StringBuilder str = new StringBuilder();
        try(Connection connection = DriverManager.getConnection(URL, username, password)){
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM calendar");
            while (resultSet.next()){
                list.add(new Calendar(resultSet.getString("eventDate"),
                resultSet.getString("event")));
            }
        }
        catch(SQLException e){
            System.err.println(e.getMessage());
        }
        list.forEach(str::append);
        
        return str;
    }
    /**
     * This method is used by the search algorithm to locate the appropriate student record from student database
     */
    private List<Student> fromStudent(String fname, String lname){
        List<Student> list = new ArrayList<>();
        try(Connection connection = DriverManager.getConnection(URL, username, password)){
           PreparedStatement getStudentStatement = connection.prepareStatement("SELECT * FROM students WHERE studentFirstName=? AND studentLastName=?");
           getStudentStatement.setString(1, fname);
           getStudentStatement.setString(2, lname);
           ResultSet resultSet = getStudentStatement.executeQuery();
           
           while (resultSet.next()){
               list.add(new Student(resultSet.getString("studentID"),
               resultSet.getString("studentFirstName"), resultSet.getString("studentLastName"),
               resultSet.getString("studentAge"),
               resultSet.getString("studentBirthDate"),
               resultSet.getString("studentAddress"),
               resultSet.getString("studentCity"),
               resultSet.getString("studentState"),
               resultSet.getString("studentZip"),
               resultSet.getString("studentPhoneNumber"),
               resultSet.getString("studentGrade"),
               resultSet.getString("ethnicity"),
               resultSet.getString("gender")));
           }
        }
        catch(SQLException e){
            System.err.println(e.getMessage());
        }
        return list;
    }
    /**
     * This method is used by the search algorithm to locate the appropriate faculty record
     */
    private List<FacultyMember> fromFaculty(String fname, String lname){
        List<FacultyMember> list = new ArrayList<>();
        try(Connection connection = DriverManager.getConnection(URL, username, password)){
           PreparedStatement getFacultyStatement = connection.prepareStatement("SELECT * FROM faculty WHERE empFirstName=? AND empLastName=?");
           getFacultyStatement.setString(1, fname);
           getFacultyStatement.setString(2, lname);
           ResultSet resultSet = getFacultyStatement.executeQuery();
           
           while (resultSet.next()){
               list.add(new FacultyMember(resultSet.getString("employeeID"),
               resultSet.getString("empFirstName"), resultSet.getString("empLastName"),
               resultSet.getString("empAge"),
               resultSet.getString("empBirthDate"),
               resultSet.getString("empAddress"),
               resultSet.getString("empCity"),
               resultSet.getString("empState"),
               resultSet.getString("empZip"),
               resultSet.getString("empPhoneNumber"),
               resultSet.getString("credentials"),
               resultSet.getString("empGrade")));
           }
        }
        catch(SQLException e){
            System.err.println(e.getMessage());
        }
        return list;
    }
    /**
     * This method is used by the search algorithm to retrieve the appropriate school record from database
     */
    private List<School> fromSchool(String name){
        List<School> list = new ArrayList<>();
        try(Connection connection = DriverManager.getConnection(URL, username, password)){
           PreparedStatement getSchoolStatement = connection.prepareStatement("SELECT * FROM school WHERE schoolName=?");
           getSchoolStatement.setString(1, name);
           ResultSet resultSet = getSchoolStatement.executeQuery();
           
           while (resultSet.next()){
               list.add(new School(resultSet.getString("schoolID"),
               resultSet.getString("schoolName"), resultSet.getString("schoolPrincipal"),
               resultSet.getString("schoolGradeLevel"),
               resultSet.getString("schoolDistrict"),
               resultSet.getString("schoolType"),
               resultSet.getString("schoolAddress"),
               resultSet.getString("schoolCity"),
               resultSet.getString("schoolState"),
               resultSet.getString("schoolZip"),
               resultSet.getString("schoolPhoneNumber"),
               resultSet.getString("schoolEmail")));
           }
        }
        catch(SQLException e){
            System.err.println(e.getMessage());
        }
        return list;
    }
    /**
     * This method set the size, visibility, and close operation for this JFrame
     */
    private void setFrame(){
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setResizable(false);
    }
    /**
     * This method retrieves this specific text area from other classes to use in the package
     * @return 
     */
    static JTextArea getToDoListTextArea(){
        return toDoListTextArea;
    }
    /**
     * This method retrieves this specific text area for other classes to use in the package
     * @return 
     */
    static JTextArea getCalendarTextArea(){
        return calendarTextArea;
    }


    private static javax.swing.JTextArea calendarTextArea;
    private static javax.swing.JTable displayTable;
    private javax.swing.JTree jTree1;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JTabbedPane taskPane;
    private static javax.swing.JTextArea toDoListTextArea;
    // End of variables declaration//GEN-END:variables
}
