/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studinfomgmtsys;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author ralph
 */
public class DeleteCalendarEventWindow extends javax.swing.JFrame {
    private final String URL = "jdbc:derby://localhost:1527/schoolDB;create=false";
    private final String username = "julsaint";
    private final String password = "julsaint";
    /**
     * Creates new form DeleteCalendarEventWindow
     */
    public DeleteCalendarEventWindow() {
        super("Delete Event");
        initComponents();
        setFrame();
        addToComboBox(getAllTasks());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calendarEventLabel = new javax.swing.JLabel();
        calendarEventComboBox = new javax.swing.JComboBox<>();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        calendarEventLabel.setText("Calendar Event:");

        calendarEventComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deleteButton)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(calendarEventLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calendarEventComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calendarEventLabel)
                    .addComponent(calendarEventComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(deleteButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * This method deletes calendar events
     * @param evt 
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int index = calendarEventComboBox.getSelectedIndex();
        int option = JOptionPane.showConfirmDialog(null, "Are you sure", "Delete Task", JOptionPane.YES_NO_OPTION);
        if (option == 0){
            try(Connection connection = DriverManager.getConnection(URL, username, password)){
                Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                ResultSet resultSet = statement.executeQuery("SELECT * FROM calendar");
              
                while (resultSet.next()){
                    if (resultSet.absolute(index))
                        resultSet.deleteRow();
                }
            }
            catch(SQLException e){
                System.err.println(e.getMessage());
            }
            JOptionPane.showMessageDialog(null, "Event deleted");
            BusyBeeMainApplicationWindow.getCalendarTextArea().setText(getEvents().toString());
            this.dispose();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed
    /**
     * This method returns all calendar events in database
     * @return 
     */
    private List<Calendar> getAllTasks(){
        List<Calendar> list = new ArrayList<>();
        try(Connection connection = DriverManager.getConnection(URL, username, password)){
            PreparedStatement getTasksStatement = connection.prepareStatement("SELECT * FROM calendar");
            ResultSet resultSet = getTasksStatement.executeQuery();
            
            while (resultSet.next()){
                list.add(new Calendar(resultSet.getString("eventDate"),
                (resultSet.getString("event"))));    
            }
        }
        catch(SQLException e){
            System.err.println(e.getMessage());
        }
        return list;
    }
    /**
     * This method add all calendar events to combobox for user selection
     * @param list 
     */
    private void addToComboBox(List<Calendar> list){
        for (Calendar event : list)
            calendarEventComboBox.addItem(event.toString());
    }
    /**
     * This method retrieves and formats all calendar events for display in text area
     * @return 
     */
    private StringBuilder getEvents(){
        List<Calendar> list = new ArrayList<>();
        StringBuilder str = new StringBuilder();
        try(Connection connection = DriverManager.getConnection(URL, username, password)){
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM calendar");
            Date date = new Date();
            while (resultSet.next()){
                list.add(new Calendar(resultSet.getString("eventDate"),
                resultSet.getString("event")));
            }
        }
        catch(SQLException e){
            System.err.println(e.getMessage());
        }
        for (Calendar event : list)
            str.append(event);
        
        return str;
    }
    /**
     * 
     * This method sets the size, visibility, and location of the JFrame
     */
    private void setFrame(){
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.setResizable(false);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> calendarEventComboBox;
    private javax.swing.JLabel calendarEventLabel;
    private javax.swing.JButton deleteButton;
    // End of variables declaration//GEN-END:variables
}
